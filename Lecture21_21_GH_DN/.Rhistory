knitr::opts_chunk$set(
comment = "#",
cache = FALSE,
collapse = TRUE,
error = TRUE,
tidy.opts=list(width.cutoff=65)
)
# the cross-validation code inside cv.glmnet() uses randomness, so to get
# reproducible results, we set the seed here.
set.seed(1)
sales2020 <- read.csv(file="boulder-2020-residential_sales.csv",
header=T, stringsAsFactors=F)
# may be useful later
sales2020_orig_vars <- colnames(sales2020)
# Remove $ and , (dollar signs and commas) from every price, then parse as
# integer. In the pattern, the vertical bar "|" means "or".
to_remove_pattern <- '\\$|,'
for (v in c("BLDG_VALUE", "LAND_VALUE", "EXTRA_FEATURE_VALUE", "SALE_PRICE")) {
digits_only <- gsub(to_remove_pattern, '', sales2020[,v])
sales2020[,v] <- as.integer(digits_only)
}
# turn the MULTIPLE_BLDGS from a character into an integer (with value 0 or 1)
sales2020$MULTIPLE_BLDGS <- as.integer(sales2020$MULTIPLE_BLDGS == "YES")
# Remove several variables from our data frame:
#   - RECEPTION_NO and Market.Area.1 are numeric, but they are IDs which are
#     more like categories than numbers, and shouldn't be used for regression
id_variables <- colnames(sales2020) == "RECEPTION_NO" | colnames(sales2020) == "Market.Area.1"
#   - variables which are of type character
chr_variables <- sapply(sales2020, is.character)
#   - variables that are constant (always the same value)
constant_variables <- NULL
for (i in 1:ncol(sales2020)) {
constant_variables[i] <- (min(sales2020[,i]) == max(sales2020[,i]))
}
# other variables that should be excluded because they are too linked to the
# dependent variable SALE_PRICE. (We can't know the SALE_DATE in advance, when
# we put the house on the market for sale.)
other_variables <- colnames(sales2020) == "SALE_DATE"
# remove all of the above variables
to_remove = which(id_variables | chr_variables | constant_variables | other_variables)
sales2020 <- sales2020[,-to_remove]
View(sales2020)
sales2020 <- read.csv(file="boulder-2020-residential_sales.csv",
header=T, stringsAsFactors=F)
# may be useful later
sales2020_orig_vars <- colnames(sales2020)
# Remove $ and , (dollar signs and commas) from every price, then parse as
# integer. In the pattern, the vertical bar "|" means "or".
to_remove_pattern <- '\\$|,'
for (v in c("BLDG_VALUE", "LAND_VALUE", "EXTRA_FEATURE_VALUE", "SALE_PRICE")) {
digits_only <- gsub(to_remove_pattern, '', sales2020[,v])
sales2020[,v] <- as.integer(digits_only)
}
# turn the MULTIPLE_BLDGS from a character into an integer (with value 0 or 1)
sales2020$MULTIPLE_BLDGS <- as.integer(sales2020$MULTIPLE_BLDGS == "YES")
# Remove several variables from our data frame:
#   - RECEPTION_NO and Market.Area.1 are numeric, but they are IDs which are
#     more like categories than numbers, and shouldn't be used for regression
id_variables <- colnames(sales2020) == "RECEPTION_NO" | colnames(sales2020) == "Market.Area.1"
#   - variables which are of type character
chr_variables <- sapply(sales2020, is.character)
#   - variables that are constant (always the same value)
constant_variables <- NULL
for (i in 1:ncol(sales2020)) {
constant_variables[i] <- (min(sales2020[,i]) == max(sales2020[,i]))
}
# other variables that should be excluded because they are too linked to the
# dependent variable SALE_PRICE. (We can't know the SALE_DATE in advance, when
# we put the house on the market for sale.)
other_variables <- colnames(sales2020) == "SALE_DATE"
# remove all of the above variables
to_remove = which(id_variables | chr_variables | constant_variables | other_variables)
sales2020 <- sales2020[,-to_remove]
head(sales2020)
lm_full <- lm(SALE_PRICE ~ ., data = sales2020)
summary(lm_full)
knitr::opts_chunk$set(
comment = "#",
cache = FALSE,
collapse = TRUE,
error = TRUE,
tidy.opts=list(width.cutoff=65)
)
# the cross-validation code inside cv.glmnet() uses randomness, so to get
# reproducible results, we set the seed here.
set.seed(1)
sales2020 <- read.csv(file="boulder-2020-residential_sales.csv",
header=T, stringsAsFactors=F)
# may be useful later
sales2020_orig_vars <- colnames(sales2020)
# Remove $ and , (dollar signs and commas) from every price, then parse as
# integer. In the pattern, the vertical bar "|" means "or".
to_remove_pattern <- '\\$|,'
for (v in c("BLDG_VALUE", "LAND_VALUE", "EXTRA_FEATURE_VALUE", "SALE_PRICE")) {
digits_only <- gsub(to_remove_pattern, '', sales2020[,v])
sales2020[,v] <- as.integer(digits_only)
}
# turn the MULTIPLE_BLDGS from a character into an integer (with value 0 or 1)
sales2020$MULTIPLE_BLDGS <- as.integer(sales2020$MULTIPLE_BLDGS == "YES")
# Remove several variables from our data frame:
#   - RECEPTION_NO and Market.Area.1 are numeric, but they are IDs which are
#     more like categories than numbers, and shouldn't be used for regression
id_variables <- colnames(sales2020) == "RECEPTION_NO" | colnames(sales2020) == "Market.Area.1"
#   - variables which are of type character
chr_variables <- sapply(sales2020, is.character)
#   - variables that are constant (always the same value)
constant_variables <- NULL
for (i in 1:ncol(sales2020)) {
constant_variables[i] <- (min(sales2020[,i]) == max(sales2020[,i]))
}
# other variables that should be excluded because they are too linked to the
# dependent variable SALE_PRICE. (We can't know the SALE_DATE in advance, when
# we put the house on the market for sale.)
other_variables <- colnames(sales2020) == "SALE_DATE"
# remove all of the above variables
to_remove = which(id_variables | chr_variables | constant_variables | other_variables)
sales2020 <- sales2020[,-to_remove]
head(sales2020)
lm_full <- lm(SALE_PRICE ~ ., data = sales2020)
summary(lm_full)
n <- nrow(sales2020)
lm_back <- step(
lm_full,
k     = log(n),
trace = 0
)
summary(lm_back)
lm_null <- lm(SALE_PRICE ~ 1, data = sales2020)
lm_forw <- step(
lm_null,
scope   = list(lower = lm_null, upper = lm_full),
direction = "forward",
k       = log(n),
trace   = 0
)
summary(lm_forw)
library(glmnet)
# Create model matrix X (dropping the intercept column later)
X <- model.matrix(SALE_PRICE ~ ., sales2020)[, -1]
y <- sales2020$SALE_PRICE
# 10‐fold CV for LASSO
cv_lasso <- cv.glmnet(X, y, alpha = 1)
best_lambda <- cv_lasso$lambda.min
# Refit at best lambda
lasso_mod <- glmnet(X, y, alpha = 1, lambda = best_lambda)
# Show nonzero coefficients
coef(lasso_mod)
# Predictions at λ_min
preds   <- predict(cv_lasso, newx = X, s = "lambda.min")
resid   <- as.vector(y - preds)
SSR         <- sum(resid^2)
mean_price  <- mean(y)
SST         <- sum((y - mean_price)^2)
# Un‐adjusted R²:
R2_lasso <- 1 - SSR / SST
cat("Unadjusted R^2 for LASSO:", R2_lasso, "\n")
plot(
y, resid,
xlab = "Actual SALE_PRICE",
ylab = "Residuals",
main = "LASSO Residuals vs. Sale Price"
)
abline(h = 0, col = "red", lty = 2)
plot(
cv_lasso$glmnet.fit,
xvar  = "lambda",
label = TRUE
)
tinytex::reinstall_tinytex(repository = "illinois")
