data = modeling_22_shiny_nonlinear.R
data = modeling_22_shiny_nonlinear.R
data = modeling_22_shiny_nonlinear.R
library(shiny); runApp('modeling_22_shiny_nonlinear.R')
library(shiny); runApp('modeling_22_shiny_nonlinear.R')
library(glmnet)
library(glmnet)
library(ISLR)
#make a matix X
X <- model.matrix(Salary ~ ., Hitters)[, -1]
data(Hitters)
data(Hitters)
data(Hitters)
library(glmnet)
library(ISLR)
data(Hitters)
Hitters <- na.omit(Hitters)
#make a matix X
X <- model.matrix(Salary ~ ., Hitters)[, -1]
#make a matix X
X = model.matrix(Salary  ., Hitters)[,-1]
#make a vector Y with salary info
Y = Hitters$Salary
#run a lasso regression model prediciting salary
lasso_fit = glmnet(X, Y, alpha=1)
#using all other variables as independent variables
#report the coefficents
coef(lasso_fit)
#compute 4^2 by hand
4^2
View(Hitters)
#compute 4^2 by hand
library(glmnet)
library(ISLR)
data(Hitters)
Hitters <- na.omit(Hitters)
#make a matix X
X = model.matrix(Salary  ., Hitters)[,-1]
#make a vector Y with salary info
Y = Hitters$Salary
#run a lasso regression model prediciting salary
lasso_fit = glmnet(X, Y, alpha=1)
#report the coefficents
coef(lasso_fit)
library(glmnet)
library(ISLR)
data(Hitters)
Hitters <- na.omit(Hitters)
# Build design matrix and response
X <- model.matrix(Salary ~ ., Hitters)[, -1]
Y <- Hitters$Salary
# 1) CV to choose lambda
cvfit  <- cv.glmnet(X, Y, alpha = 1)
bestlam <- cvfit$lambda.min
# 2) Coefficients at best lambda
print(coef(cvfit, s = "lambda.min"))
# 3) Predict and compute R^2
pred <- predict(cvfit, newx = X, s = "lambda.min")
RSS  <- sum((Y - pred)^2)
TSS  <- sum((Y - mean(Y))^2)
R2   <- 1 - RSS/TSS
# Build design matrix and response
X <- model.matrix(Salary ~ ., Hitters)[, -1]
Y <- Hitters$Salary
# 1) CV to choose lambda
cvfit  <- cv.glmnet(X, Y, alpha = 1)
bestlam <- cvfit$lambda.min
# 2) Coefficients at best lambda
print(coef(cvfit, s = "lambda.min"))
# 3) Predict and compute R^2
pred <- predict(cvfit, newx = X, s = "lambda.min")
RSS  <- sum((Y - pred)^2)
TSS  <- sum((Y - mean(Y))^2)
R2   <- 1 - RSS/TSS
print(R2)
# 1) load packages and data
library(ISLR)
library(glmnet)
data(Hitters)
Hitters <- na.omit(Hitters)
# 2) make X and Y
X <- model.matrix(Salary ~ ., Hitters)[, -1]
Y <- Hitters$Salary
# 3) 10‑fold CV to pick λ, then fit LASSO
cvfit  <- cv.glmnet(X, Y, alpha = 1)
bestλ  <- cvfit$lambda.min
lasso  <- glmnet(X, Y, alpha = 1, lambda = bestλ)
# 4) coefficients
print(coef(lasso))
# 5) compute R^2 by hand
pred   <- predict(lasso, newx = X)
SSE    <- sum((Y - pred)^2)
SST    <- sum((Y - mean(Y))^2)
R2     <- 1 - SSE/SST
# 2) make X and Y
idx <- which(colnames(Hitters) == "Salary")
X <- as.matrix(Hitters[, -idx])
Y <- as.numeric(Hitters$Salary)
lasso_model <- cv.glmnet(x,y)
lasso_model <- cv.glmnet(X,Y)
coef(lasso_model)
coef(lasso_model)
new_Y <- predict(lasso_model, X)
ssr <- sum(( Y - new_y)^2)
ssr <- sum(( Y - mean(Y))^2)
r2 <- 1-ssr/sst
ssr <- sum(( Y - new_y)^2)
sst <- sum(( Y - mean(Y))^2)
r2 <- 1-ssr/sst
print(r2)
new_Y <- predict(lasso_model, X)
ssr <- sum(( Y - new_y)^2)
sst <- sum(( Y - mean(Y))^2)
r2 <- 1-ssr/sst
print(r2)
resd <- Y - new_Y
plot(Hitters$Salary, resid)
albine(h=o, col = 'red')
# 1) load packages and data
library(ISLR)
library(glmnet)
data(Hitters)
Hitters <- na.omit(Hitters)
# 2) make X and Y
idx <- which(colnames(Hitters) == "Salary")
X <- as.matrix(Hitters[, -idx])
Y <- as.numeric(Hitters$Salary)
lasso_model <- cv.glmnet(X,Y)
coef(lasso_model)
new_Y <- predict(lasso_model, X)
ssr <- sum(( Y - new_y)^2)
sst <- sum(( Y - mean(Y))^2)
r2 <- 1-ssr/sst
print(r2)
resd <- Y - new_Y
plot(Hitters$Salary, resid)
albine(h=o, col = 'red')
plot(Hitters$Salary, resid)
albine(h=0, col = 'red')
resid <- Y - new_Y
plot(Hitters$Salary, resid)
albine(h=0, col = 'red')
abline(h=0, col = 'red')
new_Y <- predict(lasso_model, X)
ssr <- sum(( Y - new_y)^2)
sst <- sum(( Y - mean(Y))^2)
r2 <- 1-ssr/sst
print(r2)
resid <- Y - new_Y
plot(Hitters$Salary, resid)
# 1) load packages and data
library(ISLR)
library(glmnet)
data(Hitters)
Hitters <- na.omit(Hitters)
# 2) make X and Y
idx <- which(colnames(Hitters) == "Salary")
X <- as.matrix(Hitters[, -idx])
Y <- as.numeric(Hitters$Salary)
lasso_model <- cv.glmnet(X,Y)
coef(lasso_model)
new_Y <- predict(lasso_model, X)
ssr <- sum(( Y - new_y)^2)
sst <- sum(( Y - mean(Y))^2)
r2 <- 1-ssr/sst
print(r2)
resid <- Y - new_Y
plot(Hitters$Salary, resid)
abline(h=0, col = 'red')
ssr <- sum(( Y - new_y)^2)
new_Y <- predict(lasso_model, X)
