knitr::opts_chunk$set(
echo = TRUE,
cache= FALSE,
fig.align="center",
out.width="75%"
)
# load in the dataset...
suppressMessages(library(mowateR))
data(eml)
# let's use a small amount of data, so we can see the examples more clearly
N <- 100
eml_small <- eml[1:N,]
# plot with some transparency (alpha = 0.1) to better see the examples that
# overlap
plot(eml_small$DO ~ eml_small$pH, col=rgb(0, 0, 0, 0.3), pch=19,
xlab="pH level", ylab="Dissolved Oxygen (mg/L)", main="Eagle Mountain Lake")
# use lm() to find a linear model
model <- lm(DO ~ pH, data=eml_small)
abline(model, col="red")
model
plot(DO ~ pH, data=eml_small, pch=19, col=rgb(0, 0, 0, 0.3), main="Lines and residuals: which line fits best?")
# make up three lines with three slopes and intercepts (and colors)
example_lines <- data.frame(slope=    c(  6.05,    -6,   0),
intercept=c(-41.7, 60, 8.5),
color=c("red", "blue", "black"));
pH_order <- order(eml_small$pH)
for (i in 1:nrow(example_lines)) {
l <- example_lines[i,]
abline(a=l$intercept, b=l$slope, col=l$color, lwd=2)
# choose some of the examples and plot the residuals for just those examples
indexes <- pH_order[seq((i-1) * 5, nrow(eml_small), by=17)]
# predicted values (according to this line)
y0vals <- l$intercept + l$slope * eml_small$pH[indexes]
y1vals <- eml_small$DO[indexes] # actual values
xvals <- eml_small$pH[indexes] # x values (same for prediction and actual)
# draw the residuals as vertical lines
segments(xvals, y0vals, xvals, y1vals, col=l$color, lwd=2)
}
# use the residuals() built-in function
r_residuals <- residuals(model)
# compute the residuals manually using a loop
hand_residuals <- 1:nrow(eml_small)
for (i in 1:length(hand_residuals)) {
prediction <-  model$coefficients[1] + model$coefficients[2] * eml_small[i,]$pH
hand_residuals[i] <- eml_small[i,]$DO - prediction
}
# square each of the residuals
r_squared_residuals <- r_residuals ^ 2
summary(model)
# Chunk 1: setup
knitr::opts_chunk$set(
comment = "#",
cache = FALSE,
collapse = TRUE,
error = TRUE,
tidy.opts=list(width.cutoff=65)
)
library(tidyverse)
# Load the data
covid_data <- read_csv("CDPHE_COVID19_Wastewater_Dashboard_Data.csv")
# Clean and transform the data
covid_clean <- covid_data %>%
rename(
sars_rna = SARS_CoV_2_copies_L,
cases = Number_of_New_COVID19_Cases_by_
) %>%
filter(
!is.na(sars_rna),
sars_rna != 0,
cases != 0
) %>%
mutate(
log_sars_rna = log(sars_rna),
log_cases = log(cases)
)
head(covid_clean)
library(tidyverse)
# Load the data
covid_data <- read_csv("CDPHE_COVID19_Wastewater_Dashboard_Data.csv")
# Clean and transform the data
covid_clean <- covid_data %>%
rename(
sars_rna = SARS_CoV_2_copies_L,
cases = Number_of_New_COVID19_Cases_by_
) %>%
filter(
!is.na(sars_rna),
sars_rna != 0,
cases != 0
) %>%
mutate(
log_sars_rna = log(sars_rna),
log_cases = log(cases)
)
head(covid_clean)
# Scatter plot
ggplot(covid_clean, aes(x = log_sars_rna, y = log_cases)) +
geom_point(alpha = 0.6) +
labs(
x = "Log(SARS-CoV-2 RNA copies/L)",
y = "Log(Number of New COVID-19 Cases)",
title = "Scatterplot of Log(Cases) vs Log(SARS-CoV-2 RNA)"
) +
theme_minimal()
# Scatter plot
ggplot(covid_clean, aes(x = log_sars_rna, y = log_cases)) +
geom_point(alpha = 0.6) +
labs(
x = "Log(SARS-CoV-2 RNA copies/L)",
y = "Log(Number of New COVID-19 Cases)",
title = "Scatterplot of Log(Cases) vs Log(SARS-CoV-2 RNA)"
) +
theme_minimal()
# Fit the linear model
model <- lm(log_cases ~ log_sars_rna, data = covid_clean)
# Plot with regression line
ggplot(covid_clean, aes(x = log_sars_rna, y = log_cases)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(
x = "Log(SARS-CoV-2 RNA copies/L)",
y = "Log(Number of New COVID-19 Cases)",
title = "Linear Regression: Log(Cases) vs Log(SARS-CoV-2 RNA)"
) +
theme_minimal()
# Model summary
summary(model)
library(lubridate)
# Add residuals to the data
covid_clean <- covid_clean %>%
mutate(
residuals = resid(model)
)
# Mean of residuals
mean(covid_clean$residuals)
# If you have a date column, make sure it's in date format
# (replace 'Date' with the actual column name if different)
if ("Date" %in% names(covid_clean)) {
covid_clean$Date <- ymd(covid_clean$Date)
}
# Residuals vs Date plot (if date column exists)
if ("Date" %in% names(covid_clean)) {
ggplot(covid_clean, aes(x = Date, y = residuals)) +
geom_point(alpha = 0.6) +
labs(
x = "Date",
y = "Residuals",
title = "Residuals vs Date"
) +
theme_minimal()
}
library(lubridate)
# Add residuals to the data
covid_clean <- covid_clean %>%
mutate(
residuals = resid(model)
)
# Mean of residuals
mean(covid_clean$residuals)
# Convert Date column to Date type using mdy()
covid_clean$Date <- mdy(covid_clean$Date)
# Residuals vs Date plot
ggplot(covid_clean, aes(x = Date, y = residuals)) +
geom_point(alpha = 0.6) +
labs(
x = "Date",
y = "Residuals",
title = "Residuals vs Date"
) +
theme_minimal()
library(lubridate)
# Add residuals to the data
covid_clean <- covid_clean %>%
mutate(
residuals = resid(model)
)
# Mean of residuals
mean(covid_clean$residuals)
# Convert Date column to Date type using mdy()
covid_clean$Date <- mdy(covid_clean$Date)
# Residuals vs Date plot
ggplot(covid_clean, aes(x = Date, y = residuals)) +
geom_point(alpha = 0.6) +
labs(
x = "Date",
y = "Residuals",
title = "Residuals vs Date"
) +
theme_minimal()
library(lubridate)
sum(is.na(covid_clean$Date))
# Add residuals to the data
covid_clean <- covid_clean %>%
mutate(
residuals = resid(model)
)
# Mean of residuals
mean(covid_clean$residuals)
# Convert Date column to Date type using mdy()
covid_clean$Date <- mdy(covid_clean$Date)
# Residuals vs Date plot
ggplot(covid_clean, aes(x = Date, y = residuals)) +
geom_point(alpha = 0.6) +
labs(
x = "Date",
y = "Residuals",
title = "Residuals vs Date"
) +
theme_minimal()
library(lubridate)
sum(is.na(covid_clean$Date))
# Add residuals to the data
covid_clean <- covid_clean %>%
mutate(
residuals = resid(model)
)
# Mean of residuals
mean(covid_clean$residuals)
# Convert Date column to Date type using mdy()
covid_clean$Date <- mdy(covid_clean$Date)
# Residuals vs Date plot
ggplot(covid_clean, aes(x = Date, y = residuals)) +
geom_point(alpha = 0.6) +
labs(
x = "Date",
y = "Residuals",
title = "Residuals vs Date"
) +
theme_minimal()
library(lubridate)
library(tidyverse)
# Add residuals to the data
covid_clean <- covid_clean %>%
mutate(
residuals = resid(model)
)
# Mean of residuals
mean_resid <- mean(covid_clean$residuals)
mean_resid
# Convert Date column to Date type using mdy()
covid_clean$Date <- mdy(covid_clean$Date)
# Check for missing dates
num_na_dates <- sum(is.na(covid_clean$Date))
num_na_dates  # Print the number of missing dates
# Remove rows with missing dates for plotting
covid_clean_no_na <- covid_clean %>% filter(!is.na(Date))
# Residuals vs Date plot
ggplot(covid_clean_no_na, aes(x = Date, y = residuals)) +
geom_point(alpha = 0.6) +
labs(
x = "Date",
y = "Residuals",
title = "Residuals vs Date"
) +
theme_minimal()
# Residuals vs log_sars_rna plot
ggplot(covid_clean, aes(x = log_sars_rna, y = residuals)) +
geom_point(alpha = 0.6) +
labs(
x = "Log(SARS-CoV-2 RNA copies/L)",
y = "Residuals",
title = "Residuals vs Log(SARS-CoV-2 RNA)"
) +
theme_minimal()
